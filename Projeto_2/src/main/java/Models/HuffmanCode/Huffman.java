/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Models.HuffmanCode;

import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.Scanner;

/**
 *
 * @author Willian Murayama
 */
public class Huffman {

    private ArrayList<LetterHuffman> letras = new ArrayList<LetterHuffman>();
    private ArrayList<LetterHuffman> letrasCodificado = new ArrayList<LetterHuffman>();

//    private PriorityQueue<NodeHuffman> priorityQueue;
    /**
     *
     */
    public void calcula() {
        // number of characters.
        letrasCodificado.clear();
        int n = letras.size();
//        char[] charArray = {'a', 'b', 'c', 'd', 'e', 'f'};
//        int[] charfreq = {5, 9, 12, 13, 16, 45};

        // creating a priority queue q.
        // makes a min-priority queue(min-heap).
        PriorityQueue<NodeHuffman> priorityQueue = new PriorityQueue<NodeHuffman>(n, new NodeComparator());
//        priorityQueue = new PriorityQueue<NodeHuffman>(n, new NodeComparator());

//        for (int i = 0; i < n; i++) {;
//
//            // creating a Huffman node object
//            // and add it to the priority queue.
//            NodeHuffman hn = new NodeHuffman();
//
//            hn.setCaractere(charArray[i]);
//            hn.setData(charfreq[i]);
//
//            hn.setLeft(null);
//            hn.setRight(null);
//
//            // add functions adds
//            // the huffman node to the queue.
//            q.add(hn);
//        }
        for (LetterHuffman i : letras) {
            NodeHuffman nodehuffman = new NodeHuffman();

            nodehuffman.setCaractere(i.getCaractere());
            nodehuffman.setData(i.getFrequencia());

            nodehuffman.setLeft(null);
            nodehuffman.setRight(null);

            // add functions adds
            // the huffman node to the queue.
            priorityQueue.add(nodehuffman);
        }

        // create a root node
        NodeHuffman root = null;

        // Here we will extract the two minimum value
        // from the heap each time until
        // its size reduces to 1, extract until
        // all the nodes are extracted.
        while (priorityQueue.size() > 1) {

            // first min extract.
            NodeHuffman x = priorityQueue.peek();
            priorityQueue.poll();

            // second min extract.
            NodeHuffman y = priorityQueue.peek();
            priorityQueue.poll();

            // new node f which is equal
            NodeHuffman f = new NodeHuffman();

            // to the sum of the frequency of the two nodes
            // assigning values to the f node.
            f.setData(x.getData() + y.getData());
            f.setCaractere('-');

            // first extracted node as left child.
            f.setLeft(x);

            // second extracted node as the right child.
            f.setRight(y);

            // marking the f node as the root node.
            root = f;

            // add this node to the priority-queue.
            priorityQueue.add(f);
        }

        // print the codes by traversing the tree
        printCode(root, "");
        letras.clear();
//        priorityQueue.clear();
    }

    /**
     *
     * @param root
     * @param s
     */
    public void printCode(NodeHuffman root, String s) {
        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.getLeft() == null && root.getRight() == null && Character.isLetter(root.getCaractere())) {
            // c is the character in the node
//            System.out.println(root.getCaractere() + ":" + s);
            letrasCodificado.add(new LetterHuffman(root.getData(), root.getCaractere(), s));
//            root.setCode(s);
            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.
        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.getLeft(), s + "0");
        printCode(root.getRight(), s + "1");
    }

    public void slice(String text) {
        for (char i : text.replaceAll("\\s", "").toCharArray()) {
            push(i);
        }
        calcula();
    }

    public void push(char letter) {
        boolean found = false;

        for (LetterHuffman i : letras) {
            if (i.getCaractere() == letter) {
                i.setFrequencia(i.getFrequencia() + 1);
//                System.out.println("Letra %c, frequencia %d".formatted(i.getCaractere(), i.getFrequencia()));
                found = true;
                break;
            }
        }

        if (!found) {
            letras.add(new LetterHuffman(1, letter, null));
//            System.out.println("Letra %c, frequencia %d".formatted(letter, 1));
        }
    }

    public ArrayList<LetterHuffman> getLetras() {
        return letras;
    }

    public void setLetras(ArrayList<LetterHuffman> letras) {
        this.letras = letras;
    }

    public ArrayList<LetterHuffman> getLetrasCodificado() {
        return letrasCodificado;
    }

    public void setLetrasCodificado(ArrayList<LetterHuffman> letrasCodificado) {
        this.letrasCodificado = letrasCodificado;
    }

}
