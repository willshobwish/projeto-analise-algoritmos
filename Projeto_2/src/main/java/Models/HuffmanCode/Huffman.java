/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Models.HuffmanCode;

import java.util.PriorityQueue;
import java.util.Scanner;

/**
 *
 * @author Willian Murayama
 */
public class Huffman {

    public void run() {
        Scanner s = new Scanner(System.in);

        // number of characters. 
        int n = 6;
        char[] charArray = {'a', 'b', 'c', 'd', 'e', 'f'};
        int[] charfreq = {5, 9, 12, 13, 16, 45};

        // creating a priority queue q. 
        // makes a min-priority queue(min-heap). 
        PriorityQueue<NodeHuffman> q
                = new PriorityQueue<NodeHuffman>(
                        n, new NodeComparator());

        for (int i = 0; i < n; i++) {

            // creating a Huffman node object 
            // and add it to the priority queue. 
            NodeHuffman hn = new NodeHuffman();

            hn.caractere = charArray[i];
            hn.codigo = charfreq[i];

            hn.esquerda = null;
            hn.direira = null;

            // add functions adds 
            // the huffman node to the queue. 
            q.add(hn);
        }

        // create a root node 
        NodeHuffman root = null;

        // Here we will extract the two minimum value 
        // from the heap each time until 
        // its size reduces to 1, extract until 
        // all the nodes are extracted. 
        while (q.size() > 1) {

            // first min extract. 
            NodeHuffman x = q.peek();
            q.poll();

            // second min extract. 
            NodeHuffman y = q.peek();
            q.poll();

            // new node f which is equal 
            NodeHuffman f = new NodeHuffman();

            // to the sum of the frequency of the two nodes 
            // assigning values to the f node. 
            f.codigo = x.codigo + y.codigo;
            f.caractere = '-';

            // first extracted node as left child. 
            f.esquerda = x;

            // second extracted node as the right child. 
            f.direira = y;

            // marking the f node as the root node. 
            root = f;

            // add this node to the priority-queue. 
            q.add(f);
        }

        // print the codes by traversing the tree 
        printCode(root, "");
    }

    // recursive function to print the 
    // huffman-code through the tree traversal. 
    // Here s is the huffman - code generated. 
    public void printCode(NodeHuffman root, String s) {

        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 
        if (root.esquerda == null && root.direira == null
                && Character.isLetter(root.caractere)) {

            // c is the character in the node 
            System.out.println(root.caractere + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.esquerda, s + "0");
        printCode(root.direira, s + "1");

    }

// comparator class helps to compare the node 
// on the basis of one of its attribute. 
// Here we will be compared 
// on the basis of data values of the nodes. 
    // main function 
//    public static void main(String[] args) 
//    { 
//  
//        
// node class is the basic structure 
// of each node present in the Huffman - tree. 
}
